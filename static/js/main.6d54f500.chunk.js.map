{"version":3,"sources":["components/WeatherData.js","components/CheckStatus.js","App.js","serviceWorker.js","index.js"],"names":["WeatherData","data","name","country","temp","main","id","description","temp_min","temp_max","icon","feels_like","playlist","speed","deg","humidity","document","body","style","backgroundRepeat","backgroundSize","console","log","color","backgroundImage","className","src","width","height","class","frameborder","allowtransparency","allow","CheckStatus","status","statusMessage","App","props","abortController","AbortController","controllerSignal","signal","weatherInit","navigator","geolocation","setState","getCurrentPosition","position","localStorage","setItem","getWeatherData","coords","latitude","longitude","removeItem","alert","lat","lon","weatherApi","process","fetch","then","response","json","result","sys","weather","wind","isLoaded","weatherData","toFixed","error","onClick","returnActiveView","state","getItem","this","abort","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6d54f500.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst WeatherData = ({ data }) => {\r\n  const { name, country, temp, id, main, description, temp_min, temp_max, icon, feels_like, speed, deg, humidity } = data;\r\n\r\n  \r\n  const playlist = [\r\n    \r\n    {\r\n      'Thunderstorm': ['05hkyVmS70AVe95GEvt3Un', '6YAhehd4Z7s78KfKqenCg8'],\r\n      'Drizzle': ['37i9dQZF1DX4sWSpwq3LiO', '37i9dQZF1DWV7EzJMK2FUI'],\r\n      'Rain': ['5zxPaDEr4XtbvaZdUYN4FJ', '5g3o1dS5Rh2IfxVhxmPs4L'],\r\n      'Snow': ['7lZs5r4oQV2nutddffLrg0', '4M07HWIlZr7zoXoxDHR5mz'],\r\n      'Mist': ['65dGsaY3dHyV7ipkLKY8DN', '5kSUsy5FU3Wcxd4DBvXFm4'],\r\n      'Smoke':['3hulEh4qbHpzWKQPVwzgMy', '37i9dQZF1DWTcqUzwhNmKv'],\r\n      'Haze': ['37i9dQZF1DWTQwRw56TKNc', '5HiXZfY0Sj2HY6KfcKeBw5'],\r\n      'Dust': ['37i9dQZF1DWXRqgorJj26U', '37i9dQZF1DWZryfp6NSvtz'],\r\n      'Fog':['37i9dQZF1DWVw7c2MHvocy', '7fpzVWdsiJHvV7DuwZ81jR' ],\r\n      'Sand':['4UiM5IjpEO4sOnxD9hork2', '37i9dQZF1DX83I5je4W4rP'],\r\n      'Ash':['2QY8d6x5qQZxTCtyN7MWtR', '0bIXln11FhqlMHXudhCXZB'],\r\n      'Squall':['011ehcZV5brKd9bQSBMzLM', '6ABA1ZmUK452hQFpOqINfQ'],\r\n      'Tornado': ['56MhdyycM1uSjfZ3hdB5C0', '3R4y9c4iIrmrN3uwrTqRao'] ,\r\n      'Clear': ['6gCC8kozvUlLGTzl2YO2MR', '37i9dQZF1DX1s9knjP51Oa'],\r\n      'Clouds': ['3So47qlswBZpIERObnkMMG', '3oh3NmpgHy2leLcu7oobAr']\r\n    }\r\n    \r\n  ];\r\n    // Background Initialize\r\n    document.body.style.backgroundRepeat = \"no-repeat\";\r\n    document.body.style.backgroundSize = \"cover\";\r\n    \r\n    // WEATHER-SELECT ALGORITHM STARTS HERE\r\n    if (main === 'Clear'){ // 1 CLEAR\r\n      console.log(\"YES IT IS CLEAR\");\r\n      document.body.style.color = \"white\"\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/BcARfKN.gif')\";\r\n      \r\n\r\n    } else if (main === 'Clouds') { // 2 CLOUDS\r\n      console.log(\"YES IT IS CLOUDY\");\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/GoXhAEm.gif')\"\r\n\r\n    } else if (main === 'Thunderstorm') { // 3 THUNDERSTORM\r\n      console.log(\"YES IT IS THUNDER\");\r\n      document.body.style.color = \"white\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/3lf8BLK.gif')\";\r\n    \r\n    } else if (main === 'Drizzle') { // 4 DRIZZLE\r\n      console.log(\"YES IT IS DRIZZLE\");\r\n      document.body.style.color = \"white\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/zbT8dgf.gif')\";\r\n    \r\n    } else if (main === 'Rain') { // 5 RAIN\r\n      console.log(\"YES IT IS RAINING\");\r\n      document.body.style.color = \"white\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/9O76DSA.gif')\";\r\n    \r\n    } else if (main === 'Snow') { // 6 Snow\r\n      console.log(\"YES IT IS SNOWING\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/bqtoVKP.gif')\";\r\n    \r\n    } else if (main === 'Ash') { // 7 Ash (ATMOSPHERE STARTS HERE)\r\n      console.log(\"YES IT IS ASHY\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/AVkmoYq.gif')\";\r\n    \r\n    } else if (main === 'Mist') { // 8 Mist\r\n      console.log(\"YES IT IS MISTY\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/3vDbBtk.gif')\";\r\n    \r\n    } else if (main === 'Smoke') { // 9 Smoke\r\n      console.log(\"YES IT IS SMOKE\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/AVkmoYq.gif')\";\r\n    \r\n    } else if (main === 'Haze') { // 10 Haze\r\n      console.log(\"YES IT IS HAZE\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/XB7mRaV.gif')\";\r\n    \r\n    } else if (main === 'Dust') { // 11 Dust\r\n      console.log(\"YES IT IS DUST\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/q6dyVao.gif')\";\r\n    \r\n    } else if (main === 'Sand') { // 12 Sand\r\n      console.log(\"YES IT IS SAND\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/q6dyVao.gif')\";\r\n    \r\n    } else if (main === 'Squall') { // 13 Squall\r\n      console.log(\"YES IT IS SQUALL\");\r\n      document.body.style.color = \"white\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/nJiFKuT.gif')\";\r\n    \r\n    } else if (main === 'Tornado') { // 14 Tornado\r\n      console.log(\"YES IT IS TORNADO\");\r\n      document.body.style.color = \"white\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/iuYUjJZ.gif')\";\r\n    \r\n    } else if (main === 'Fog') { // 15 Fog\r\n      console.log(\"YES IT IS FOG\");\r\n      document.body.style.color = \"black\";\r\n      document.body.style.backgroundImage = \"url('https://i.imgur.com/3vDbBtk.gif')\";\r\n    }\r\n    // WEATHER-SELECT ALGORITHM ENDS HERE\r\n  \r\n  return (\r\n    <>\r\n      <main>\r\n        \r\n        <div className='weather-main'>\r\n          <div> \r\n            <h1 className='description'>{description}</h1>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2 className='temperature'>{temp}°C</h2>\r\n          <div className='info-sub'>\r\n            <h1>feels like {feels_like} °C</h1>\r\n            <h1>today's high {temp_max} °C</h1>\r\n            <h1>today's low {temp_min} °C</h1>\r\n            <h1>{name}, {country}</h1>\r\n          </div>\r\n          <div className='icon'>\r\n          <img \r\n           src={`http://openweathermap.org/img/wn/${icon}@2x.png` }  width=\"125px\" height=\"125px\"/>\r\n          </div>\r\n        </div>\r\n\r\n        <div class='newMove3'> \r\n          <img \r\n           src={`https://raw.githubusercontent.com/gist/k0ji13/5c8ff08924d477f4038575bb0bab7675/raw/aaa12a6b4812bdabf3dcc50daca88c6d4bd41c5e/raindropped.svg` }  width=\"188px\" height=\"188px\"/>\r\n        </div>\r\n\r\n        <div class='newMove2'> \r\n          <iframe src={`https://open.spotify.com/embed/playlist/${playlist[0][main][0]}` } width=\"240\" height=\"420\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n        </div>\r\n        <div class='newMove1'> \r\n          <iframe src={`https://open.spotify.com/embed/playlist/${playlist[0][main][1]}` } width=\"240\" height=\"420\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n        </div>\r\n        \r\n      </main>\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default WeatherData;","\r\nimport React from 'react'\r\n\r\nconst CheckStatus = ({ status }) => {\r\n  let statusMessage = '';\r\n\r\n  if (status === 'fetching'){\r\n    statusMessage = 'Fetching weather';\r\n  }else if(status === 'unable'){\r\n    statusMessage = 'Unable to find your location';\r\n  }else if(status === 'unsupported'){\r\n    statusMessage = 'Location Feature is blocked or unsupported';\r\n  }else{\r\n    statusMessage = 'init';\r\n  }\r\n\r\n\r\n  return (\r\n    <h3 className='status-message'>{statusMessage}</h3>\r\n  );\r\n}\r\nexport default CheckStatus;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport WeatherData from './components/WeatherData'\r\nimport CheckStatus from './components/CheckStatus'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      status: 'init',\r\n      isLoaded: false,\r\n      weatherData: null,\r\n    }\r\n  }\r\n\r\n  abortController = new AbortController();\r\n  controllerSignal = this.abortController.signal;\r\n\r\n  weatherInit = () => {\r\n\r\n    const success = (position) => {\r\n      this.setState({status: 'fetching'});\r\n      localStorage.setItem('location-allowed', true);\r\n      this.getWeatherData(position.coords.latitude, position.coords.longitude);\r\n    }\r\n    \r\n    const error = () => {\r\n      this.setState({status: 'unable'});\r\n      localStorage.removeItem('location-allowed');\r\n      alert('Unable to retrieve location.');\r\n    }\r\n    \r\n    if (navigator.geolocation) {\r\n      this.setState({status: 'fetching'});\r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n    } else {\r\n      this.setState({status: 'unsupported'});\r\n      alert('Your browser does not support location tracking, or permission is denied.');\r\n    }\r\n  }\r\n\r\n\r\n  getWeatherData = (lat, lon) => {\r\n    const weatherApi = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\r\n\r\n    fetch(weatherApi, { signal: this.controllerSignal })\r\n    .then(response => response.json())\r\n    .then(\r\n      (result) => {\r\n        console.log(result);\r\n        const { name } = result;\r\n        const { country } = result.sys;\r\n        const { temp, temp_min, temp_max, feels_like, humidity } = result.main;\r\n        const { id, main, description, icon } = result.weather[0];\r\n        const { speed, deg } = result.wind;\r\n\r\n        this.setState({\r\n          status: 'success',\r\n          isLoaded: true,\r\n          weatherData: {\r\n            name,\r\n            country,\r\n            id,\r\n            main,\r\n            description,\r\n            icon,\r\n            temp: temp.toFixed(1),\r\n            feels_like: feels_like.toFixed(1),\r\n            temp_min: temp_min.toFixed(1),\r\n            temp_max: temp_max.toFixed(1),\r\n            speed,\r\n            deg,\r\n            humidity\r\n          }\r\n        });\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    );\r\n  }\r\n  \r\n\r\n  onClick = () => {\r\n    this.weatherInit();\r\n  }\r\n\r\n\r\n  returnActiveView = (status) => {\r\n    switch(status) {\r\n      case 'init':\r\n        return(\r\n          <button \r\n          className='btn-main' \r\n          onClick={this.onClick}\r\n          >\r\n            Get My Location\r\n          </button>\r\n        );\r\n      case 'success':\r\n        return <WeatherData data={this.state.weatherData}  />;\r\n      default:\r\n        return <CheckStatus status={status} />;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if(localStorage.getItem('location-allowed')) {\r\n      this.weatherInit();\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.abortController.abort();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <body>\r\n      <div className='App'>\r\n        <div className='container'>\r\n              {this.returnActiveView(this.state.status)}\r\n        </div>\r\n        <div id=\"root\"></div>\r\n        </div>\r\n      </body>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}