{"ast":null,"code":"var _jsxFileName = \"/Users/taha/REACT/weather-app/src/App.js\";\nimport React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n    this.controllerSignal = this.abortController.signal;\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null\n    };\n  }\n\n  getWeatherInfo() {\n    const apiWeather = `http://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n    fetch(apiWeather, {\n      signal: this.controllerSignal\n    }).then(response => response.json()).then(result => {\n      console.log(result);\n      const {\n        name\n      } = result;\n      const {\n        country\n      } = result.sys;\n      const {\n        temp,\n        temp_min,\n        temp_max,\n        feels_like,\n        humidity\n      } = result.main;\n      const {\n        description,\n        icon\n      } = result.weather[0];\n      const {\n        speed,\n        deg\n      } = result.wind;\n      this.setState({\n        isLoaded: true,\n        weatherData: {\n          name,\n          country,\n          description,\n          icon,\n          temp: temp.toFixed(1),\n          feels_like: feels_like.toFixed(1),\n          temp_min: temp_min.toFixed(1),\n          temp_max: temp_max.toFixed(1),\n          speed,\n          deg,\n          humidity\n        }\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/taha/REACT/weather-app/src/App.js"],"names":["React","App","Component","constructor","props","abortController","AbortController","controllerSignal","signal","state","status","isLoaded","weatherData","getWeatherInfo","apiWeather","process","env","REACT_APP_WEATHER_KEY","fetch","then","response","json","result","console","log","name","country","sys","temp","temp_min","temp_max","feels_like","humidity","main","description","icon","weather","speed","deg","wind","setState","toFixed","error","render","componentWillUnmount","abort","componentDidMount","getWeatherData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SASnBC,eATmB,GASD,IAAIC,eAAJ,EATC;AAAA,SAUnBC,gBAVmB,GAUA,KAAKF,eAAL,CAAqBG,MAVrB;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,MADG;AAEXC,MAAAA,QAAQ,EAAE,KAFC;AAGXC,MAAAA,WAAW,EAAE;AAHF,KAAb;AAKD;;AAKDC,EAAAA,cAAc,GAAE;AACd,UAAMC,UAAU,GAAI,8EAA6EC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,EAAnI;AACAC,IAAAA,KAAK,CAACJ,UAAD,EAAa;AAAEN,MAAAA,MAAM,EAAE,KAAKD;AAAf,KAAb,CAAL,CACDY,IADC,CACIC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADhB,EAEDF,IAFC,CAGCG,MAAD,IAAY;AAEVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,YAAM;AAAEG,QAAAA;AAAF,UAAWH,MAAjB;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAcJ,MAAM,CAACK,GAA3B;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,QAAR;AAAkBC,QAAAA,QAAlB;AAA4BC,QAAAA,UAA5B;AAAwCC,QAAAA;AAAxC,UAAqDV,MAAM,CAACW,IAAlE;AACA,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAwBb,MAAM,CAACc,OAAP,CAAe,CAAf,CAA9B;AACA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAiBhB,MAAM,CAACiB,IAA9B;AAEA,WAAKC,QAAL,CAAc;AACZ7B,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,WAAW,EAAE;AACXa,UAAAA,IADW;AAEXC,UAAAA,OAFW;AAGXQ,UAAAA,WAHW;AAIXC,UAAAA,IAJW;AAKXP,UAAAA,IAAI,EAAEA,IAAI,CAACa,OAAL,CAAa,CAAb,CALK;AAMXV,UAAAA,UAAU,EAAEA,UAAU,CAACU,OAAX,CAAmB,CAAnB,CAND;AAOXZ,UAAAA,QAAQ,EAAEA,QAAQ,CAACY,OAAT,CAAiB,CAAjB,CAPC;AAQXX,UAAAA,QAAQ,EAAEA,QAAQ,CAACW,OAAT,CAAiB,CAAjB,CARC;AASXJ,UAAAA,KATW;AAUXC,UAAAA,GAVW;AAWXN,UAAAA;AAXW;AAFD,OAAd;AAgBD,KA7BD,EA8BCU,KAAD,IAAW;AACT,WAAKF,QAAL,CAAc;AACZ7B,QAAAA,QAAQ,EAAE,IADE;AAEZ+B,QAAAA;AAFY,OAAd;AAID,KAnCD;AAsCD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAOD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKvC,eAAL,CAAqBwC,KAArB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,cAAL;AACD;;AAvE+B;;AA2ElC,eAAe9C,GAAf","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null\n    }\n  }\n\n  abortController = new AbortController();\n  controllerSignal = this.abortController.signal;\n\n  getWeatherInfo(){\n    const apiWeather = `http://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n    fetch(apiWeather, { signal: this.controllerSignal })\n  .then(response => response.json())\n  .then(\n    (result) => {\n\n      console.log(result);\n\n      const { name } = result;\n      const { country } = result.sys;\n      const { temp, temp_min, temp_max, feels_like, humidity } = result.main;\n      const { description, icon } = result.weather[0];\n      const { speed, deg } = result.wind;\n\n      this.setState({\n        isLoaded: true,\n        weatherData: {\n          name,\n          country,\n          description,\n          icon,\n          temp: temp.toFixed(1),\n          feels_like: feels_like.toFixed(1),\n          temp_min: temp_min.toFixed(1),\n          temp_max: temp_max.toFixed(1),\n          speed,\n          deg,\n          humidity\n        }\n      });\n    },\n    (error) => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    }\n  );\n  \n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n\n        </div>\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}