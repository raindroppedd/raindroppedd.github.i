{"ast":null,"code":"var _jsxFileName = \"/Users/taha/GitHub/Weather-App/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport WeatherData from './components/WeatherData';\nimport CheckStatus from './components/CheckStatus';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n    this.controllerSignal = this.abortController.signal;\n\n    this.weatherInit = () => {\n      const success = position => {\n        this.setState({\n          status: 'fetching'\n        });\n        localStorage.setItem('location-allowed', true);\n        this.getWeatherData(position.coords.latitude, position.coords.longitude);\n      };\n\n      const error = () => {\n        this.setState({\n          status: 'unable'\n        });\n        localStorage.removeItem('location-allowed');\n        alert('Unable to retrieve location.');\n      };\n\n      if (navigator.geolocation) {\n        this.setState({\n          status: 'fetching'\n        });\n        navigator.geolocation.getCurrentPosition(success, error);\n      } else {\n        this.setState({\n          status: 'unsupported'\n        });\n        alert('Your browser does not support location tracking, or permission is denied.');\n      }\n    };\n\n    this.newsInit = () => {\n      const success = () => {\n        this.setState({\n          status: 'fetching'\n        });\n        this.getNewsData();\n      };\n\n      const error = () => {\n        this.setState({\n          status: 'unable'\n        });\n        this.getNewsData();\n      };\n    };\n\n    this.getWeatherData = (lat, lon) => {\n      const weatherApi = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n      fetch(weatherApi, {\n        signal: this.controllerSignal\n      }).then(response => response.json()).then(result => {\n        console.log(result);\n        const {\n          name\n        } = result;\n        const {\n          country\n        } = result.sys;\n        const {\n          temp,\n          temp_min,\n          temp_max,\n          feels_like,\n          humidity\n        } = result.main;\n        const {\n          id,\n          main,\n          description,\n          icon\n        } = result.weather[0];\n        const {\n          speed,\n          deg\n        } = result.wind;\n        this.setState({\n          status: 'success',\n          isLoaded: true,\n          weatherData: {\n            name,\n            country,\n            id,\n            main,\n            description,\n            icon,\n            temp: temp.toFixed(1),\n            feels_like: feels_like.toFixed(1),\n            temp_min: temp_min.toFixed(1),\n            temp_max: temp_max.toFixed(1),\n            speed,\n            deg,\n            humidity\n          }\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.getNewsData = () => {\n      const apiKey = 'd44300a8a99146a6afd80231e59737b0';\n      let sources = 'bbc-news';\n      let url = `http://newsapi.org/v2/everything?sources=${sources}&apiKey=${apiKey}`;\n      fetch(url).then(res => {\n        //return res.json()\n        var json_data = res.json();\n        var obj = json_data.parse(json_data.articles);\n        console.log(obj);\n      }).then(data => {\n        const {\n          article_one\n        } = data['articles'][1]['author'];\n        const {\n          article_two\n        } = data['articles'][2]['author'];\n        console.log(article_two);\n        this.setState({\n          status: 'success',\n          isLoaded: true,\n          newsData: {\n            article_one,\n            article_two\n          }\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.onClick = () => {\n      this.weatherInit();\n      this.newsInit();\n    };\n\n    this.returnActiveView = status => {\n      switch (status) {\n        case 'init':\n          return /*#__PURE__*/React.createElement(\"button\", {\n            className: \"btn-main\",\n            onClick: this.onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 11\n            }\n          }, \"Get My Location\");\n\n        case 'success':\n          return /*#__PURE__*/React.createElement(WeatherData, {\n            data: this.state.weatherData,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 16\n            }\n          });\n\n        default:\n          return /*#__PURE__*/React.createElement(CheckStatus, {\n            status: status,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 16\n            }\n          });\n      }\n    };\n\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null,\n      newsData: null\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('location-allowed')) {\n      this.weatherInit();\n    } else {\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, this.returnActiveView(this.state.status)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/taha/GitHub/Weather-App/src/App.js"],"names":["React","WeatherData","CheckStatus","App","Component","constructor","props","abortController","AbortController","controllerSignal","signal","weatherInit","success","position","setState","status","localStorage","setItem","getWeatherData","coords","latitude","longitude","error","removeItem","alert","navigator","geolocation","getCurrentPosition","newsInit","getNewsData","lat","lon","weatherApi","process","env","REACT_APP_WEATHER_KEY","fetch","then","response","json","result","console","log","name","country","sys","temp","temp_min","temp_max","feels_like","humidity","main","id","description","icon","weather","speed","deg","wind","isLoaded","weatherData","toFixed","apiKey","sources","url","res","json_data","obj","parse","articles","data","article_one","article_two","newsData","onClick","returnActiveView","state","componentDidMount","getItem","componentWillUnmount","abort","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport WeatherData from './components/WeatherData'\nimport CheckStatus from './components/CheckStatus'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null,\n      newsData: null\n    }\n  }\n\n  abortController = new AbortController();\n  controllerSignal = this.abortController.signal;\n\n  weatherInit = () => {\n\n    const success = (position) => {\n      this.setState({status: 'fetching'});\n      localStorage.setItem('location-allowed', true);\n      this.getWeatherData(position.coords.latitude, position.coords.longitude);\n    }\n    \n    const error = () => {\n      this.setState({status: 'unable'});\n      localStorage.removeItem('location-allowed');\n      alert('Unable to retrieve location.');\n    }\n    \n    if (navigator.geolocation) {\n      this.setState({status: 'fetching'});\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      this.setState({status: 'unsupported'});\n      alert('Your browser does not support location tracking, or permission is denied.');\n    }\n  }\n\n  newsInit = () => {\n    const success = () => {\n      this.setState({status: 'fetching'});\n      this.getNewsData();\n    }\n    const error = () => {\n      this.setState({status: 'unable'});\n      this.getNewsData();\n    }\n  }\n\n  getWeatherData = (lat, lon) => {\n    const weatherApi = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n\n    fetch(weatherApi, { signal: this.controllerSignal })\n    .then(response => response.json())\n    .then(\n      (result) => {\n        console.log(result);\n        const { name } = result;\n        const { country } = result.sys;\n        const { temp, temp_min, temp_max, feels_like, humidity } = result.main;\n        const { id, main, description, icon } = result.weather[0];\n        const { speed, deg } = result.wind;\n\n        this.setState({\n          status: 'success',\n          isLoaded: true,\n          weatherData: {\n            name,\n            country,\n            id,\n            main,\n            description,\n            icon,\n            temp: temp.toFixed(1),\n            feels_like: feels_like.toFixed(1),\n            temp_min: temp_min.toFixed(1),\n            temp_max: temp_max.toFixed(1),\n            speed,\n            deg,\n            humidity\n          }\n        });\n      },\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    );\n  }\n  \n  getNewsData = () => {\n    const apiKey = 'd44300a8a99146a6afd80231e59737b0'\n      \n    let sources = 'bbc-news'\n    let url = `http://newsapi.org/v2/everything?sources=${sources}&apiKey=${apiKey}`\n\n\n    fetch(url).then((res)=>{\n      //return res.json()\n      var json_data = res.json()\n      var obj = json_data.parse(json_data.articles);\n      console.log(obj)\n    })\n    .then((data)=>{\n      const { article_one } = data['articles'][1]['author'];\n      const { article_two } = data['articles'][2]['author'];\n      console.log(article_two);\n\n      this.setState({status: 'success', isLoaded: true, \n      newsData: {article_one, article_two}});\n    },\n    (error) => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n\n    }\n    );    \n\n  }\n\n\n  onClick = () => {\n    this.weatherInit();\n    this.newsInit();\n  }\n\n\n  returnActiveView = (status) => {\n    switch(status) {\n      case 'init':\n        return(\n          <button \n          className='btn-main' \n          onClick={this.onClick}\n          >\n            Get My Location\n          </button>\n        );\n      case 'success':\n        return <WeatherData data={this.state.weatherData}  />;\n      default:\n        return <CheckStatus status={status} />;\n    }\n  }\n\n  componentDidMount() {\n    if(localStorage.getItem('location-allowed')) {\n      this.weatherInit();\n    } else {\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  render() {\n    return (\n      <body>\n      <div className='App'>\n        <div className='container'>\n              {this.returnActiveView(this.state.status)}\n        </div>\n        <div id=\"root\"></div>\n        </div>\n      </body>\n    );\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}