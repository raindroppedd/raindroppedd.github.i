{"ast":null,"code":"var _jsxFileName = \"/Users/taha/REACT/weather-app/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport WeatherData from './components/WeatherData';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.abortController = new AbortController();\n    this.controllerSignal = this.abortController.signal;\n\n    this.weatherStart = () => {\n      const successful = position => {\n        this.getWeatherData(position.coords.latitude, position.coords.longitude);\n      };\n\n      const unsuccessful = () => {\n        alert(\"Can't find your location\");\n      };\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(successful, unsuccessful);\n      } else {\n        alert('Location feature is not supported by your browser');\n      }\n    };\n\n    this.getWeatherData = (latitude, longitude) => {\n      const weatherApi = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n      fetch(weatherApi, {\n        signal: this.controllerSignal\n      }).then(response => response.json()).then(result => {\n        console.log(result);\n        const {\n          name\n        } = result;\n        const {\n          country\n        } = result.sys;\n        const {\n          temp,\n          temp_min,\n          temp_max,\n          feels_like,\n          humidity\n        } = result.main;\n        const {\n          description,\n          icon\n        } = result.weather[0];\n        const {\n          speed,\n          deg\n        } = result.wind;\n        this.setState({\n          isLoaded: true,\n          weatherData: {\n            name,\n            country,\n            description,\n            icon,\n            temp: temp.toFixed(1),\n            feels_like: feels_like.toFixed(1),\n            temp_min: temp_min.toFixed(1),\n            temp_max: temp_max.toFixed(1),\n            speed,\n            deg,\n            humidity\n          }\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null\n    };\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  componentDidMount() {\n    this.weatherStart();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(WeatherData, {\n      data: this.state.weatherData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/taha/REACT/weather-app/src/App.js"],"names":["React","WeatherData","App","Component","constructor","props","abortController","AbortController","controllerSignal","signal","weatherStart","successful","position","getWeatherData","coords","latitude","longitude","unsuccessful","alert","navigator","geolocation","getCurrentPosition","weatherApi","process","env","REACT_APP_WEATHER_KEY","fetch","then","response","json","result","console","log","name","country","sys","temp","temp_min","temp_max","feels_like","humidity","main","description","icon","weather","speed","deg","wind","setState","isLoaded","weatherData","toFixed","error","state","status","componentWillUnmount","abort","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport WeatherData from './components/WeatherData'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'init',\n      isLoaded: false,\n      weatherData: null\n    }\n  }\n\n  abortController = new AbortController();\n  controllerSignal = this.abortController.signal;\n\n  weatherStart = () => {\n    const successful = (position) => {\n      this.getWeatherData(position.coords.latitude, position.coords.longitude);\n    }\n    const unsuccessful = () => {\n      alert(\"Can't find your location\");\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(successful, unsuccessful);\n    } else {\n      alert('Location feature is not supported by your browser');\n    }\n\n  }\n\n\n  getWeatherData = (latitude, longitude) => {\n    const weatherApi = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${process.env.REACT_APP_WEATHER_KEY}`;\n  \n    fetch(weatherApi, { signal: this.controllerSignal })\n    .then(response => response.json())\n    .then(\n      (result) => {\n  \n        console.log(result);\n  \n        const { name } = result;\n        const { country } = result.sys;\n        const { temp, temp_min, temp_max, feels_like, humidity } = result.main;\n        const { description, icon } = result.weather[0];\n        const { speed, deg } = result.wind;\n  \n        this.setState({\n          isLoaded: true,\n          weatherData: {\n            name,\n            country,\n            description,\n            icon,\n            temp: temp.toFixed(1),\n            feels_like: feels_like.toFixed(1),\n            temp_min: temp_min.toFixed(1),\n            temp_max: temp_max.toFixed(1),\n            speed,\n            deg,\n            humidity\n          }\n        });\n      },\n      (error) => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    );\n  }\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  componentDidMount() {\n    this.weatherStart();\n  }\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <WeatherData data = {this.state.weatherData}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}